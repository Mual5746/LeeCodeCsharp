/**
Second Minimum Node In a Binary Tree

Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in 
this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the
smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, 
root.right.val) always holds.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' 
value in the whole tree.

If no such second minimum value exists, output -1 instead.
 
Analysis
--------

Highlighted rules:
1. A node either has 0 or 2 children. 
2. A node's value is the min of its children, if it has children.

2 Key observations:
1. The root of the whole tree value is the min value of the whole tree.
2. If a parent has children, one --or both-- of its children has the same value. Let's call the
    subtrees formed by such children to be of type S. The second minimum can only exist in a subtree S.

Example:        ---- root is the minimum
                |
                v
                1
             /     \ 
          /           \
         1              3
      /     \          /  \
    1         1       3     4
 3     1    1   1    3 8   4 8
3 3   1 6  2 1
           ^
           |
            ---- second to minimum
			
Algorithm
---------
 This solution implements a recursive algorithm to find the second minimum.
 It first recognizes the mimimum is the root's value, min1.
 It then recursively searches for the second minimum, min2, in only subtrees of type S.
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {

    private int min1 = 10000;
    private int min2 = 100000;
    private Nullable<int> min22 = null;
    
    public int FindSecondMinimumValue(TreeNode root) {
          long[] res = new long[2];
          res[0]=100000;
          res[1]=100000000;
        if (root == null) return -1; 

        min1 = root.val; // since the root is always minimum
        res[0] = root.val;

        search(root, res); // looking for second min
        if (res[1] == 100000000 )
        return -1;
        //return min22 == null ? min2 : -1; 
        return (int) res[1];
    
    }

    private void search (TreeNode node, long[] res) {
        if (node == null){
            return;
        }  // base case if there is no children

        // if the value of children is equal to parent then look left and right node

        if (node.val == min1){
            search(node.left, res);
            search(node.right, res);
        } else if (node.left == null || node.right == null ||node.val < res[1]) {
            res[1] = node.val;
        } 
    }
}



//no working -----------------------

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{


    // Definition for a binary tree node.
    public class TreeNode
    {
        public int val;
        public TreeNode left;
        public TreeNode right;
        public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
        {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }

    int min = int.MaxValue;
    bool flag = false;

    public int FindSecondMinimumValue(TreeNode root)
    {
        int min1 = findMin(root, root.val);
        if (!flag)
            return -1;

        return min1;
    }
    /*public int findsecondMin(TreeNode root)
    {
        if (root == null)
            return 0;
        Var [] res = new var[1];

        procces(root, min);
        min = Math.Min(min, root.val);

        return min;

    } */

    public int findMin(TreeNode root, int k)
    {
        if (root == null)
            return 0;

        findMin(root.left, k);
        findMin(root.right, k);

        if (k != root.val)
        {
            flag = true;
            min = Math.Min(min, root.val);
        }

        return min;

    }

    /* private void procces(TreeNode node, int[] res)
    {
        if (node == null || (node.left == null && node.right == null))
        {
            return;
        }
        // childeren, left and right

        //left childe is less than the parent 
        if (node.left.val < node.val)
        {
            if (res[0] == null; )
        }

    }*/
    class Solution
    {
        public static void Main(string[] args)
        {
            

            var numm = new[] { 2, 2, 5,  5, 7 };

            var index = TreeNode(numm);

            TreeNode tree = new TreeNode[2, 2, 5, 5, 7];

            Console.WriteLine(result);

        }
    }
}
