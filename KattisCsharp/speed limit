
// https://open.kattis.com/problems/speedlimit?editsubmit=10228913 

/*
In this case, we create a new 2D array with size n x 2, and use the first column to store the key and the second column to store the value.
Then we iterate over the array and calculate the sum of the difference of values and keys, in the same way as before.
It's worth noting that arrays has a fixed size, so if you want to add more items to the array, you need to create a new array, copy the elements from the previous array and add the new elements. Also, unlike a Dictionary, arrays do not have a built-in method for looking up values based on a key, so you'll need to implement your own mechanism for that if it's needed.

Keep in mind that Hashtable and Dictionary are more efficient than arrays when it comes to storing and retrieving data based on a key, as they use a hash function to map the keys to the corresponding values.
Also, arrays are a better choice if you know the size of the data in advance and the data is not going to change in size.
*/

using System;
using System.Xml;
using System.Collections.Generic;

class MainClass
{
    public static void Main(string[] args)
    {
        int n = int.Parse(Console.ReadLine()); // Read the number of lines
        List<int> results = new List<int>();
        while (n != -1)
        {
            int[,] arr = new int[n, 2]; // Create a new 2D array
            for (int i = 0; i < n; i++)
            {
                string[] line = Console.ReadLine().Split(' '); // Read the line and split it by spaces
                arr[i, 0] = int.Parse(line[0]); // Get the first integer
                arr[i, 1] = int.Parse(line[1]); // Get the second integer
            }
            int sum = 0;
            int time = arr[n - 1, 1];
            for (int i = n-1; i >=0 ; i--)
            {
                if (i == 0)
                {
                    sum += arr[i , 1] * arr[i, 0];

                } else
                {
                    
                    sum += (arr[i, 1] - arr[i - 1, 1]) * arr[i, 0];

                }             

            }
            results.Add(sum);
            if (!int.TryParse(Console.ReadLine(), out n))
            {
                break;
            }
        }
        for (int i = 0; i < results.Count ;  i++) {
            Console.WriteLine(results[i] + " miles");

        }
        
    }
}


//________________Using dictionary -------------------------Not complet------------------------------------

using System;
using System.Collections.Generic;

class MainClass {
  public static void Main (string[] args) {
    int n = int.Parse(Console.ReadLine()); // Read the number of lines
    List<int> results = new List<int>();
    while(n != -1) {
        Dictionary<int, int> dict = new Dictionary<int, int>(); // Create a new dictionary
        for (int i = 0; i < n; i++) {
          string[] line = Console.ReadLine().Split(' '); // Read the line and split it by spaces
          int a = int.Parse(line[0]); // Get the first integer
          int b = int.Parse(line[1]); // Get the second integer
          dict.Add(a, b); // Add the integers to the dictionary as key-value pair
        }
        var keys = dict.Keys;
        int sum = 0;
        for(int i = 0; i < dict.Count - 1; i++) {
            var key1 = keys.ElementAt(i);
            var key2 = keys.ElementAt(i+1);
            var value1 = dict[key1];
            var value2 = dict[key2];
            sum += (value1 - value2) * key2;
        }
        results.Add(sum);
        if(!int.TryParse(Console.ReadLine(), out n)) {
            break;
        }
    }
    Console.WriteLine(string.Join(",", results));
  }
}

//_______________________using hashtable -----------------------------------Not complete ----------------

using System;
using System.Collections;

class MainClass {
  public static void Main (string[] args) {
    int n = int.Parse(Console.ReadLine()); // Read the number of lines
    List<int> results = new List<int>();
    while(n != -1) {
        Hashtable ht = new Hashtable(); // Create a new Hashtable
        for (int i = 0; i < n; i++) {
          string[] line = Console.ReadLine().Split(' '); // Read the line and split it by spaces
          int a = int.Parse(line[0]); // Get the first integer
          int b = int.Parse(line[1]); // Get the second integer
          ht.Add(a, b); // Add the integers to the Hashtable as key-value pair
        }
        var keys = new ArrayList(ht.Keys);
        int sum = 0;
        for(int i = 0; i < ht.Count - 1; i++) {
            var key1 = (int)keys[i];
            var key2 = (int)keys[i+1];
            var value1 = (int)ht[key1];
            var value2 = (int)ht[key2];
            sum += (value1 - value2) * key2;
        }
        results.Add(sum);
        if(!int.TryParse(Console.ReadLine(), out n)) {
            break;
        }
    }
    Console.WriteLine(string.Join(",", results));
  }
}


